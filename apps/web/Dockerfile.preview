# syntax = docker/dockerfile:1

# Build with:
# docker build -t ~~_starter.name_~~:preview -f apps/web/Dockerfile.preview .
# Run with:
# docker run -it --rm -p 3000:3000 --name ~~_starter.name_~~-~~_starter.name_~~-preview --label com.docker.compose.project=~~_starter.name_~~ ~~_starter.name_~~:preview

# Adjust NODE_VERSION as desired
ARG NODE_VERSION=24.5.0
FROM node:${NODE_VERSION}-slim AS base

LABEL fly_launch_runtime="Node.js/Prisma"

# Node.js/Prisma app lives here
WORKDIR /app

# Set environment
ENV NODE_ENV="preview"


# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build node modules
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential node-gyp openssl pkg-config python-is-python3

# Install node modules
COPY package-lock.json package.json ./
RUN npm ci --ignore-scripts

# Copy application code
COPY . .

# Not sure why, but this is needed for Nx graph to work
ENV NX_DAEMON=false

# Build the application
# Prisma Client is generated as a dependent step to build
RUN npx nx build web --mode preview


# Final stage for app image
FROM base

# Install packages needed for deployment
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y ca-certificates openssl wget && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install litestream
RUN wget https://github.com/benbjohnson/litestream/releases/download/v0.3.13/litestream-v0.3.13-linux-amd64.deb && \
    dpkg -i litestream-v0.3.13-linux-amd64.deb && \
    rm litestream-v0.3.13-linux-amd64.deb

# Copy built application
COPY --from=build /app/apps/web/package.json /app
COPY --from=build /app/apps/web/docker-entrypoint.preview.js /app
COPY --from=build /app/apps/web/litestream.yml /app
COPY --from=build /app/apps/web/build /app/build
RUN npm install --omit=dev

# Copy Prisma Client and prisma schema and migrations
COPY --from=build /app/node_modules/.prisma /app/node_modules/.prisma
COPY --from=build /app/libs/data/prisma /app/prisma

# Setup sqlite3 on a separate volume
RUN mkdir -p /data
VOLUME /data

# Entrypoint prepares the database.
ENTRYPOINT [ "/app/docker-entrypoint.preview.js" ]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
ENV DATABASE_URL="file:///data/sqlite.db"
CMD [ "npx", "react-router-serve", "build/server/index.js" ]
